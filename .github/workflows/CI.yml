name: CI

env:
  DEBUG: napi:*
  APP_NAME: ruspty
  MACOSX_DEPLOYMENT_TARGET: '10.13'

permissions:
  contents: read
  id-token: write

on:
  push:
    branches: [main, develop]
    tags-ignore: [dev]
  pull_request: null
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          # Linux x86_64
          - host: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: |-
              set -e &&
              rustup target add x86_64-unknown-linux-gnu &&
              cd /build &&
              npm run build --target x86_64-unknown-linux-gnu &&
              strip *.node
          
          # Linux ARM64
          - host: ubuntu-20.04
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: |-
              set -e &&
              rustup target add aarch64-unknown-linux-gnu &&
              cd /build &&
              npm run build --target aarch64-unknown-linux-gnu &&
              aarch64-linux-gnu-strip *.node

          # Linux ARMv7
          - host: ubuntu-20.04
            target: armv7-unknown-linux-gnueabihf
            setup: |
              sudo apt-get update
              sudo apt-get install gcc-arm-linux-gnueabihf -y
            build: |
              rustup target add armv7-unknown-linux-gnueabihf
              npm run build --target armv7-unknown-linux-gnueabihf
              arm-linux-gnueabihf-strip *.node

          # Linux i686 (32-bit)
          - host: ubuntu-20.04
            target: i686-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: |-
              set -e &&
              rustup target add i686-unknown-linux-gnu &&
              cd /build &&
              npm run build --target i686-unknown-linux-gnu &&
              strip *.node

          # Linux musl x86_64 (Alpine)
          - host: ubuntu-20.04
            target: x86_64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: |-
              set -e &&
              rustup target add x86_64-unknown-linux-musl &&
              cd /build &&
              npm run build --target x86_64-unknown-linux-musl &&
              strip *.node

          # Linux musl ARM64 (Alpine)
          - host: ubuntu-20.04
            target: aarch64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine-aarch64
            build: |-
              set -e &&
              rustup target add aarch64-unknown-linux-musl &&
              cd /build &&
              npm run build --target aarch64-unknown-linux-musl &&
              aarch64-linux-musl-strip *.node

          # macOS x86_64 (Intel)
          - host: macos-13
            target: x86_64-apple-darwin
            build: |
              rustup target add x86_64-apple-darwin
              npm run build --target x86_64-apple-darwin
              strip -x *.node

          # macOS ARM64 (Apple Silicon)
          - host: macos-14
            target: aarch64-apple-darwin
            build: |
              rustup target add aarch64-apple-darwin
              npm run build --target aarch64-apple-darwin
              strip -x *.node

          # Windows x86_64
          - host: windows-2022
            build: |
              rustup target add x86_64-pc-windows-msvc
              npm run build --target x86_64-pc-windows-msvc
            target: x86_64-pc-windows-msvc

          # Windows ARM64
          - host: windows-2022
            target: aarch64-pc-windows-msvc
            build: |
              rustup target add aarch64-pc-windows-msvc
              npm run build --target aarch64-pc-windows-msvc

          # Windows i686 (32-bit)
          - host: windows-2022
            target: i686-pc-windows-msvc
            build: |
              rustup target add i686-pc-windows-msvc
              npm run build --target i686-pc-windows-msvc

          # FreeBSD x86_64
          - host: ubuntu-20.04
            target: x86_64-unknown-freebsd
            setup: |
              sudo apt-get update
              sudo apt-get install -y clang
            build: |
              rustup target add x86_64-unknown-freebsd
              npm run build --target x86_64-unknown-freebsd

    name: stable - ${{ matrix.settings.target }} - node@20
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup node
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 20
          cache: npm

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}

      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash

      - name: Setup node x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: npm config set target_arch ia32
        shell: bash

      - name: Install dependencies
        run: npm ci --ignore-scripts
        if: ${{ !matrix.settings.docker }}

      - name: Setup node x86
        uses: actions/setup-node@v4
        if: matrix.settings.target == 'i686-unknown-linux-gnu'
        with:
          node-version: 20
          architecture: x86

      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: '--user 0:0 -v ${{ github.workspace }}/.cargo-cache:/root/.cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/root/.cargo/registry/index -v ${{ github.workspace }}:/build -w /build'
          run: ${{ matrix.settings.build }}

      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error

  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs: build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-13
            target: x86_64-apple-darwin
            architecture: x64
          - host: macos-14
            target: aarch64-apple-darwin
            architecture: arm64
          - host: windows-2022
            target: x86_64-pc-windows-msvc
            architecture: x64
        node: ['18', '20', '21']
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          architecture: ${{ matrix.settings.architecture }}
          cache: npm

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: .

      - name: List packages
        run: ls -R .
        shell: bash

      - name: Test bindings
        run: npm test

  test-linux-x64-gnu-binding:
    name: Test bindings on Linux-x64-gnu - node@${{ matrix.node }}
    needs: build
    strategy:
      fail-fast: false
      matrix:
        node: ['18', '20', '21']
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: npm

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-x86_64-unknown-linux-gnu
          path: .

      - name: List packages
        run: ls -R .
        shell: bash

      - name: Test bindings
        run: docker run --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-slim npm test

  publish:
    name: Publish
    runs-on: ubuntu-20.04
    needs:
      - test-macOS-windows-binding
      - test-linux-x64-gnu-binding

    steps:
      - uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Move artifacts
        run: npm run artifacts

      - name: Build wrapper
        run: npm run build:wrapper

      - name: List packages
        run: ls -R ./npm
        shell: bash

      - name: Publish
        run: |
          npm config set provenance true
          if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+.*$";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --access public
          elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+.*-beta\.[0-9]\+$";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --tag beta --access public
          elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+.*-alpha\.[0-9]\+$";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --tag alpha --access public
          else
            echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}